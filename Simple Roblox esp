-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

-- ESP settings
local ESPEnabled = true

-- Create GUI
local playerGui = LocalPlayer:WaitForChild("PlayerGui")
local screenGui = Instance.new("ScreenGui", playerGui)
local toggleButton = Instance.new("TextButton", screenGui)

-- Button properties
toggleButton.Size = UDim2.new(0, 100, 0, 50) -- Size of the button
toggleButton.Position = UDim2.new(0.5, -50, 0.5, -25) -- Center of the screen
toggleButton.Text = "ESP On"
toggleButton.BackgroundColor3 = Color3.fromRGB(0, 170, 0) -- Green background
toggleButton.TextColor3 = Color3.new(1, 1, 1) -- White text
toggleButton.Font = Enum.Font.SourceSans
toggleButton.TextSize = 24

-- Create drawings
local outlines = {}
local connections = {}

-- Function to create lines and outlines
local function createLine() 
    local line = Drawing.new("Line")
    line.Color = Color3.new(1, 0, 0) -- Red color
    line.Thickness = 2
    return line
end

local function createOutline() 
    local outline = Drawing.new("Triangle")
    outline.Color = Color3.new(1, 1, 0) -- Yellow color
    outline.Filled = false
    outline.Thickness = 1
    return outline
end

-- Draw ESP for a player
local function drawESP(player)
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    local rootPart = player.Character.HumanoidRootPart

    -- Check if the player is visible
    local isVisible = rootPart and rootPart:IsPointInRegion3(Workspace.CurrentCamera.CFrame:PointToWorldSpace(rootPart.Position))

    if isVisible then
        local head = player.Character:FindFirstChild("Head")

        if head then
            -- Draw outline for head
            local outline = createOutline()
            outline.PointA = Workspace.CurrentCamera:WorldToViewportPoint(head.Position + Vector3.new(0, 1, 0))
            outline.PointB = Workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, 2, 0))
            outline.PointC = Workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position + Vector3.new(-0.5, 0, 0))
            outline.Visible = true
            table.insert(outlines, outline)

            -- Draw lines to connect parts
            for _, part in pairs(player.Character:GetChildren()) do
                if part:IsA("MeshPart") or part:IsA("Part") then
                    local partPos = part.Position
                    local screenPos = Workspace.CurrentCamera:WorldToViewportPoint(partPos)

                    -- Create a line from Head to each part
                    local connection = createLine()
                    connection.From = outline.PointA
                    connection.To = Vector2.new(screenPos.X, screenPos.Y)
                    connection.Visible = true
                    table.insert(connections, connection)
                end
            end
        end
    end
end

-- Update ESP every frame
RunService.RenderStepped:Connect(function()
    if ESPEnabled then
        -- Clear previous outlines and connections
        for _, outline in pairs(outlines) do
            outline:Remove()
        end
        outlines = {}

        for _, connection in pairs(connections) do
            connection:Remove()
        end
        connections = {}

        -- Draw ESP for all players
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Team ~= LocalPlayer.Team then 
                drawESP(player) 
            end
        end
    end
end)

-- Toggle ESP when button is clicked
toggleButton.MouseButton1Click:Connect(function()
    ESPEnabled = not ESPEnabled
    toggleButton.Text = ESPEnabled and "ESP On" or "ESP Off"
    toggleButton.BackgroundColor3 = ESPEnabled and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0) -- Change color based on state
end)

-- Allow dragging the button
local dragging = false
local dragInput, mousePos, startPos

toggleButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragInput = input
        mousePos = UserInputService:GetMouseLocation() - toggleButton.AbsolutePosition
        startPos = toggleButton.Position

        -- Dragging the button
        repeat
            local newPos = UserInputService:GetMouseLocation() - mousePos
            toggleButton.Position = UDim2.new(0, newPos.X, 0, newPos.Y)
            RunService.RenderStepped:Wait()
        until not dragging

        dragInput = nil
    end
end)

toggleButton.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

-- Cleanup on player removal
Players.PlayerRemoving:Connect(function(player)
    for _, outline in pairs(outlines) do
        outline:Remove()
    end
    for _, connection in pairs(connections) do
        connection:Remove()
    end
end)
